/* OUTPUT_FORMAT("elf32-h8300") */
OUTPUT_ARCH(h8300h)
ENTRY("_start")

MEMORY
{
    /* ROMの定義 o=origin=開始アドレス l=length=領域のサイズ */
    romall(rx)  : o = 0x000000, l = 0x080000    /* 512KB ROMの全域 */
    vectors(r)  : o = 0x000000, l = 0x000100    /* 割り込みベクタ */
    rom(rx)     : o = 0x000100, l = 0x07ff00
    /* RAMの定義 */
    ramall(rwx) : o = 0xffbf20, l = 0x004000    /* RAMの全域 16KB */
    softvec     : o = 0xffbf20, l = 0x000040    /* ソフトウェア割り込みベクタの領域 */
    buffer(rwx) : o = 0xffdf20, l = 0x001d00    /* 8KB */
    data(rwx)   : o = 0xfffc20, l = 0x000300
    stack(rw)   : o = 0xffff00, l = 0x000000
}

SECTIONS
{

	.vectors : {
		vector.o(.data)
	} > vectors     /* .vectorsセクションをMEMORYコマンドで定義した割り込みベクタに配置する */

	.text : {
	    _text_start = . ;
		*(.text)
		_etext = . ;
	} > rom         /* .textセクションをROMに配置する */

	.rodata : {
	    _rodata_start = . ;
		*(.strings)
		*(.rodata)
		*(.rodata.*)
		_erodata = . ;
	} > rom

    .softvec : {
        _softvec = . ;
    } > softvec

    .buffer : {
        _buffer_start = . ;
    } > buffer

	.data : {
	    _data_start = . ;
		*(.data)
		_edata = . ;
	} > data AT> rom
	/* .dataセクションはRAMに配置されてプログラムはRAMを仮想アドレスとして読み書きする。*/
	/* AR> romで物理アドレスはROMになる。*/

	.bss : {
	    _bss_start = . ;
		*(.bss)
		*(COMMON)
		_ebss = . ;
	} > data AT> rom

	. = ALIGN(4);
	_end = . ;

	.stack : {
	    _stack = .;
	} > stack
}
